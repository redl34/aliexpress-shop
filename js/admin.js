// –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑—á–∏—Ç—É—î —Ç–æ–≤–∞—Ä–∏ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —Å–∞–π—Ç—É

let products = [];
let categories = [];
let currentEditingProduct = null;
let priceChecker = new PriceChecker();

document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ Admin panel loading...');
    
    // –ü—Ä–æ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
    const isAuthenticated = localStorage.getItem('adminAuthenticated');
    if (!isAuthenticated) {
        const password = prompt('–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
        if (password === 'admin123') {
            localStorage.setItem('adminAuthenticated', 'true');
        } else {
            alert('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å!');
            window.location.href = 'index.html';
            return;
        }
    }
    
    initializeAdmin();
});

async function initializeAdmin() {
    console.log('üöÄ Initializing admin panel...');
    
    await loadProductsFromPages();
    setupEventListeners();
    setupNavigation();
    updateDashboard();
    displayAllProducts();
    displayProductsForDeletion();
    
    console.log('‚úÖ Admin panel ready');
}

// –û–°–ù–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø: –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —Å–∞–π—Ç—É
async function loadProductsFromPages() {
    console.log('üì• Loading products from website pages...');
    
    try {
        // –ó—á–∏—Ç—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –∫–æ–∂–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        const pages = [
            { url: 'index.html', category: 'featured' },
            { url: 'mens-clothing1.html', category: 'mens-clothing' },
            { url: 'womens-clothing1.html', category: 'womens-clothing' },
            { url: 'electronics1.html', category: 'electronics' }
        ];
        
        products = [];
        
        for (const page of pages) {
            const pageProducts = await extractProductsFromPage(page.url, page.category);
            products = products.concat(pageProducts);
        }
        
        console.log(`‚úÖ Loaded ${products.length} products from website pages`);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        localStorage.setItem('extractedProducts', JSON.stringify(products));
        
    } catch (error) {
        console.error('‚ùå Error loading products from pages:', error);
        // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ localStorage
        loadProductsFromStorage();
    }
}

// –§—É–Ω–∫—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–æ–≤–∞—Ä—ñ–≤ –∑ HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏
async function extractProductsFromPage(pageUrl, category) {
    try {
        console.log(`üîç Extracting products from: ${pageUrl}`);
        
        const response = await fetch(pageUrl);
        const html = await response.text();
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π DOM –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        
        const products = [];
        
        // –®—É–∫–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞ —Ä—ñ–∑–Ω–∏–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        const productSelectors = [
            '.product-item',
            '.product-card', 
            '.product',
            '[class*="product"]',
            '.item',
            '.goods-item'
        ];
        
        let productElements = [];
        
        for (const selector of productSelectors) {
            const elements = doc.querySelectorAll(selector);
            if (elements.length > 0) {
                console.log(`Found ${elements.length} products with selector: ${selector}`);
                productElements = elements;
                break;
            }
        }
        
        // –ü–∞—Ä—Å–∏–º–æ –∫–æ–∂–µ–Ω —Ç–æ–≤–∞—Ä
        productElements.forEach((element, index) => {
            try {
                const product = parseProductElement(element, category, index);
                if (product && product.name) {
                    products.push(product);
                }
            } catch (error) {
                console.warn('Error parsing product element:', error);
            }
        });
        
        console.log(`üì¶ Extracted ${products.length} products from ${pageUrl}`);
        return products;
        
    } catch (error) {
        console.error(`Error extracting from ${pageUrl}:`, error);
        return [];
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –æ–∫—Ä–µ–º–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É —Ç–æ–≤–∞—Ä—É
function parseProductElement(element, category, index) {
    const product = {
        id: generateId() + index,
        category: category,
        status: 'active'
    };
    
    // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É
    product.name = getTextContent(element, [
        'h3', 'h4', '.product-name', '.name', '.title',
        '[class*="name"]', '[class*="title"]'
    ]) || `–¢–æ–≤–∞—Ä ${index + 1}`;
    
    // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É
    const priceText = getTextContent(element, [
        '.product-price', '.price', '.cost', '.value',
        '[class*="price"]', '[class*="cost"]'
    ]);
    
    if (priceText) {
        // –í–∏–ª—É—á–∞—î–º–æ —á–∏—Å–ª–∞ –∑ —Ç–µ–∫—Å—Ç—É —Ü—ñ–Ω–∏
        const priceMatch = priceText.match(/(\d+[\.,]?\d*)/);
        if (priceMatch) {
            product.price = parseFloat(priceMatch[1].replace(',', '.'));
        }
    }
    
    if (!product.price) {
        product.price = Math.floor(Math.random() * 1000) + 100; // –ó–∞–ø–∞—Å–Ω–∞ —Ü—ñ–Ω–∞
    }
    
    // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    product.image = getImageSrc(element, [
        'img', '.product-image', '.image', 
        '[class*="image"]', '[class*="img"]'
    ]) || 'images/placeholder.jpg';
    
    // –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–∏—Å
    product.description = getTextContent(element, [
        '.product-description', '.description', '.desc',
        '[class*="description"]', '[class*="desc"]', 'p'
    ]) || '–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É';
    
    // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ AliExpress (—Å–ø–æ—á–∞—Ç–∫—É –ø—É—Å—Ç–µ - –∑–∞–ø–æ–≤–Ω—é—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É)
    product.aliExpressUrl = '';
    
    return product;
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É
function getTextContent(element, selectors) {
    for (const selector of selectors) {
        const found = element.querySelector(selector);
        if (found && found.textContent.trim()) {
            return found.textContent.trim();
        }
    }
    return element.textContent.trim().substring(0, 100);
}

function getImageSrc(element, selectors) {
    for (const selector of selectors) {
        const found = element.querySelector(selector);
        if (found && found.src) {
            return found.src;
        }
    }
    return null;
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ localStorage (—è–∫—â–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–¥–∞–≤—Å—è)
function loadProductsFromStorage() {
    const stored = localStorage.getItem('extractedProducts');
    if (stored) {
        products = JSON.parse(stored);
        console.log(`üì¶ Loaded ${products.length} products from storage`);
    } else {
        createFallbackProducts();
    }
}

// –ó–∞–ø–∞—Å–Ω—ñ –¥–∞–Ω—ñ
function createFallbackProducts() {
    console.log('üõ† Creating fallback products...');
    
    products = [
        {
            id: 1,
            name: "–ß–æ–ª–æ–≤—ñ—á–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ Basic",
            category: "mens-clothing",
            price: 299,
            image: "https://via.placeholder.com/300x300/007bff/ffffff?text=T-Shirt",
            description: "–ó—Ä—É—á–Ω–∞ —á–æ–ª–æ–≤—ñ—á–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ –∑ –±–∞–≤–æ–≤–Ω–∏",
            aliExpressUrl: "",
            status: "active"
        },
        {
            id: 2,
            name: "–î–∂–∏–Ω—Å–∏ Classic",
            category: "mens-clothing",
            price: 799,
            image: "https://via.placeholder.com/300x300/28a745/ffffff?text=Jeans",
            description: "–ö–ª–∞—Å–∏—á–Ω—ñ —á–æ–ª–æ–≤—ñ—á—ñ –¥–∂–∏–Ω—Å–∏",
            aliExpressUrl: "",
            status: "active"
        }
    ];
    
    showNotification('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ', 'warning');
}

// –†–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏...
function setupEventListeners() {
    document.getElementById('check-all-prices')?.addEventListener('click', checkAllProducts);
    document.getElementById('stop-checking')?.addEventListener('click', stopPriceChecking);
    document.getElementById('update-prices')?.addEventListener('click', updateAllPrices);
    document.getElementById('delete-checked')?.addEventListener('click', deleteFailedProducts);
    document.getElementById('add-product-btn')?.addEventListener('click', showProductModal);
    document.getElementById('product-form')?.addEventListener('submit', handleProductSubmit);
    document.getElementById('cancel-edit')?.addEventListener('click', resetProductModal);
    document.querySelector('.close')?.addEventListener('click', resetProductModal);
    document.getElementById('reload-products')?.addEventListener('click', reloadProducts);
    document.getElementById('logout-btn')?.addEventListener('click', logout);
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
async function reloadProducts() {
    showNotification('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫...', 'info');
    await loadProductsFromPages();
    displayAllProducts();
    displayProductsForDeletion();
    updateDashboard();
    showNotification('‚úÖ –¢–æ–≤–∞—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ');
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤
function displayAllProducts() {
    const tbody = document.getElementById('all-products-body');
    if (!tbody) return;
    
    if (products.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" style="text-align: center; padding: 2rem;">–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</td></tr>';
        return;
    }
    
    tbody.innerHTML = products.map(product => {
        const check = priceChecker.getCheckResult(product.id);
        const statusIcon = priceChecker.getStatusIcon(check?.status || 'pending');
        const statusText = priceChecker.getStatusText(check?.status || 'pending');
        
        return `
            <tr>
                <td>${product.id}</td>
                <td>
                    <img src="${product.image}" alt="${product.name}" 
                         style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;"
                         onerror="this.src='images/placeholder.jpg'">
                </td>
                <td>${product.name}</td>
                <td>${getCategoryName(product.category)}</td>
                <td>${product.price} –≥—Ä–Ω</td>
                <td>
                    <div class="check-status">
                        <span class="status-icon" title="${statusText}">${statusIcon}</span>
                        ${check?.message || '–©–µ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ'}
                    </div>
                </td>
                <td>
                    <button class="btn-check-single" onclick="checkSingleProduct(${product.id})" 
                            title="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä">üîç</button>
                    <button class="btn-edit" onclick="editProduct(${product.id})">‚úèÔ∏è</button>
                    <button class="btn-delete" onclick="deleteSingleProduct(${product.id})">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    }).join('');
}

// –†–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π (displayProductsForDeletion, updateDashboard, etc.)...
// ... –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –∂ —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó

function getCategoryName(category) {
    const categories = {
        'mens-clothing': '–ß–æ–ª–æ–≤—ñ—á–∏–π –æ–¥—è–≥',
        'womens-clothing': '–ñ—ñ–Ω–æ—á–∏–π –æ–¥—è–≥',
        'electronics': '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞',
        'featured': '–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ'
    };
    return categories[category] || category;
}

function generateId() {
    return Date.now();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
window.editProduct = editProduct;
window.checkSingleProduct = checkSingleProduct;
window.deleteSingleProduct = deleteSingleProduct;
window.reloadProducts = reloadProducts;