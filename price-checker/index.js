const puppeteer = require('puppeteer');
const axios = require('axios');
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

class AliExpressChecker {
    constructor() {
        this.results = [];
        this.reportPath = path.join(__dirname, 'report.json');
        // –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏
        this.productPages = [
            'https://redl34.github.io/aliexpress-shop/mens-clothing1.html'
            // –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ–ª–∏ –±—É–¥–µ –≥–æ—Ç–æ–≤–æ
        ];
    }

    async init() {
        this.browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏
    async parseAllPages() {
        let allProducts = [];
        
        for (const pageUrl of this.productPages) {
            console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–æ—Ä—ñ–Ω–∫–∏: ${pageUrl}`);
            try {
                const products = await this.parseSinglePage(pageUrl);
                allProducts = allProducts.concat(products);
                console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: ${products.length}`);
            } catch (error) {
                console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ${pageUrl}:`, error.message);
            }
            
            // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
        return allProducts;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ - –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø
    async parseSinglePage(pageUrl) {
        const page = await this.browser.newPage();
        
        console.log(`üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏: ${pageUrl}`);
        await page.goto(pageUrl, {
            waitUntil: 'networkidle2',
            timeout: 30000
        });

        const products = await page.evaluate((url) => {
            const items = [];
            
            // –®—É–∫–∞—î–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∫–ª–∞—Å–æ–º .product-card
            const productElements = document.querySelectorAll('.product-card');
            console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ .product-card –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${productElements.length}`);
            
            productElements.forEach((product, index) => {
                try {
                    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤
                    const titleElem = product.querySelector('.product-details h3');
                    const priceElem = product.querySelector('.product-details .price');
                    const articleElem = product.querySelector('.product-details .articul');
                    const imageElem = product.querySelector('.carousel-image.active');
                    const buttonElem = product.querySelector('.product-details a[href*="aliexpress"]');
                    
                    // –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä—Ç–∏–∫—É–ª –∑ data-–∞—Ç—Ä–∏–±—É—Ç—É
                    const dataArticle = product.getAttribute('data-articul');
                    
                    // –û—Ç—Ä–∏–º—É—î–º–æ –∞—Ä—Ç–∏–∫—É–ª –∑ —Ç–µ–∫—Å—Ç—É
                    let articleFromText = '';
                    if (articleElem) {
                        const articleText = articleElem.textContent || '';
                        const articleMatch = articleText.match(/–∞—Ä—Ç\.\s*([A-Za-z0-9]+)/i);
                        if (articleMatch) {
                            articleFromText = articleMatch[1].trim();
                        }
                    }
                    
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ data-–∞—Ç—Ä–∏–±—É—Ç –∞–±–æ —Ç–µ–∫—Å—Ç
                    const article = dataArticle || articleFromText || `ART_${index + 1}`;

                    if (titleElem && priceElem && imageElem && buttonElem) {
                        const productData = {
                            article: article,
                            title: titleElem.textContent.trim(),
                            yourPrice: priceElem.textContent.trim(),
                            imageUrl: imageElem.src,
                            aliExpressUrl: buttonElem.href,
                            pageUrl: url,
                            pageName: url.split('/').pop()
                        };
                        
                        console.log(`‚úÖ –¢–æ–≤–∞—Ä ${index + 1}:`, {
                            article: productData.article,
                            title: productData.title,
                            price: productData.yourPrice
                        });
                        
                        items.push(productData);
                    } else {
                        console.log(`‚ùå –¢–æ–≤–∞—Ä ${index + 1} –Ω–µ –º–∞—î –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:`, {
                            title: !!titleElem,
                            price: !!priceElem,
                            image: !!imageElem,
                            button: !!buttonElem
                        });
                    }
                    
                } catch (e) {
                    console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–æ–≤–∞—Ä—É ${index + 1}:`, e);
                }
            });
            
            console.log(`üìä –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${items.length}`);
            return items;
        }, pageUrl);

        await page.close();
        return products;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ AliExpress - –ü–û–ö–†–ê–©–ï–ù–ê –í–ï–†–°–Ü–Ø
    async parseAliExpress(url) {
        const page = await this.browser.newPage();
        
        console.log(`üîó –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ AliExpress: ${url}`);
        await page.waitForTimeout(Math.random() * 5000 + 3000);
        
        try {
            await page.goto(url, {
                waitUntil: 'domcontentloaded',
                timeout: 45000
            });

            // –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–Ω–∏
            await page.waitForSelector('[data-product-price], .product-price, .price--current, .uniform-banner-box-price, [class*="price"]', {
                timeout: 15000
            }).catch(() => {
                console.log('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤ —Ü—ñ–Ω–∏, —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –±—É–¥—å-—è–∫—É —Ü—ñ–Ω—É');
            });

            const aliData = await page.evaluate(() => {
                // –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É —Ü—ñ–Ω–∏
                const priceSelectors = [
                    '[data-product-price]',
                    '.product-price',
                    '.price--current',
                    '.uniform-banner-box-price',
                    '.snow-price_SnowPrice__mainM__jo8n2',
                    '[class*="price"]'
                ];
                
                let price = '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
                for (const selector of priceSelectors) {
                    const element = document.querySelector(selector);
                    if (element && element.textContent && element.textContent.trim()) {
                        const priceText = element.textContent.trim();
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å —Ü–∏—Ñ—Ä–∏ (—Ü—ñ–Ω—É)
                        if (/\d/.test(priceText)) {
                            price = priceText;
                            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ü—ñ–Ω—É –∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}: ${price}`);
                            break;
                        }
                    }
                }

                // –°–ø—Ä–æ—â–µ–Ω–∏–π –ø–æ—à—É–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                let imageUrl = '';
                const imageSelectors = [
                    '.main-image img',
                    '.gallery-img',
                    '.image-viewer img',
                    'img[src*="jpg"], img[src*="png"], img[src*="jpeg"]'
                ];
                
                for (const selector of imageSelectors) {
                    const element = document.querySelector(selector);
                    if (element && element.src) {
                        imageUrl = element.src;
                        break;
                    }
                }

                return {
                    price: price,
                    imageUrl: imageUrl,
                    title: document.title,
                    url: window.location.href
                };
            });

            console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ AliExpress: ${aliData.price}`);
            await page.close();
            return aliData;
            
        } catch (error) {
            console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É AliExpress ${url}:`, error.message);
            await page.close();
            return null;
        }
    }

    // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ü—ñ–Ω
    comparePrices(yourPrice, aliPrice) {
        const extractPrice = (priceStr) => {
            if (!priceStr || priceStr === '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ') return 0;
            const match = priceStr.replace(/[^\d.,]/g, '').match(/([\d.,]+)/);
            return match ? parseFloat(match[1].replace(',', '.')) : 0;
        };

        const your = extractPrice(yourPrice);
        const ali = extractPrice(aliPrice);

        if (your === 0 || ali === 0) {
            return { 
                needsUpdate: false, 
                difference: 0,
                percentageDiff: 0,
                error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è'
            };
        }

        const difference = Math.abs(your - ali);
        const percentageDiff = (difference / your) * 100;

        return {
            needsUpdate: percentageDiff > 5,
            yourPrice: your,
            aliPrice: ali,
            difference: difference,
            percentageDiff: percentageDiff.toFixed(2)
        };
    }

    // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
    async compareImages(img1Url, img2Url) {
        try {
            if (!img1Url || !img2Url) {
                console.log('‚ùå –û–¥–Ω–∞ –∑ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤—ñ–¥—Å—É—Ç–Ω—è');
                return false;
            }

            const img1Buffer = await this.downloadImage(img1Url);
            const img2Buffer = await this.downloadImage(img2Url);

            if (!img1Buffer || !img2Buffer) {
                console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è');
                return false;
            }

            const img1 = sharp(img1Buffer).resize(100, 100).grayscale();
            const img2 = sharp(img2Buffer).resize(100, 100).grayscale();

            const [img1Data, img2Data] = await Promise.all([
                img1.raw().toBuffer(),
                img2.raw().toBuffer()
            ]);

            let mse = 0;
            for (let i = 0; i < img1Data.length; i++) {
                mse += Math.pow(img1Data[i] - img2Data[i], 2);
            }
            mse /= img1Data.length;

            const normalizedMse = mse / 255;
            const result = normalizedMse < 10;
            console.log(`üñºÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${result ? '–°—Ö–æ–∂—ñ' : '–†—ñ–∑–Ω—ñ'} (MSE: ${normalizedMse.toFixed(2)})`);
            return result;

        } catch (error) {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å:', error.message);
            return false;
        }
    }

    async downloadImage(url) {
        try {
            const response = await axios({
                url: url,
                responseType: 'arraybuffer',
                timeout: 10000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });
            return response.data;
        } catch (error) {
            console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${url}:`, error.message);
            return null;
        }
    }

    // –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    async runCheck() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–Ω...');
        await this.init();
        
        try {
            console.log(`üìÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ ${this.productPages.length} —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑ —Ç–æ–≤–∞—Ä–∞–º–∏`);
            const yourProducts = await this.parseAllPages();
            console.log(`üì¶ –í—Å—å–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ ${yourProducts.length} —Ç–æ–≤–∞—Ä—ñ–≤`);

            for (let i = 0; i < yourProducts.length; i++) {
                const product = yourProducts[i];
                console.log(`\nüîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–≤–∞—Ä ${i + 1}/${yourProducts.length}:`);
                console.log(`   –ù–∞–∑–≤–∞: ${product.title}`);
                console.log(`   –ê—Ä—Ç–∏–∫—É–ª: ${product.article}`);
                console.log(`   –¶—ñ–Ω–∞ –Ω–∞ —Å–∞–π—Ç—ñ: ${product.yourPrice}`);
                console.log(`   –°—Ç–æ—Ä—ñ–Ω–∫–∞: ${product.pageName}`);
                
                const aliData = await this.parseAliExpress(product.aliExpressUrl);
                
                if (aliData && aliData.price && aliData.price !== '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ') {
                    const priceCheck = this.comparePrices(product.yourPrice, aliData.price);
                    const imagesMatch = await this.compareImages(product.imageUrl, aliData.imageUrl);
                    
                    this.results.push({
                        article: product.article,
                        product: product.title,
                        yourPrice: product.yourPrice,
                        aliPrice: aliData.price,
                        priceCheck,
                        imagesMatch,
                        needsUpdate: priceCheck.needsUpdate || !imagesMatch,
                        yourImage: product.imageUrl,
                        aliImage: aliData.imageUrl,
                        url: product.aliExpressUrl,
                        pageUrl: product.pageUrl,
                        pageName: product.pageName,
                        checkedAt: new Date().toISOString()
                    });

                    console.log(`   üí∞ –¶—ñ–Ω–∞ –Ω–∞ AliExpress: ${aliData.price}`);
                    console.log(`   üìä –†—ñ–∑–Ω–∏—Ü—è: ${priceCheck.percentageDiff}%`);
                    console.log(`   üñºÔ∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${imagesMatch ? '‚úì –°–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å' : '‚úó –†—ñ–∑–Ω—ñ'}`);
                    console.log(`   üîÑ –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${priceCheck.needsUpdate || !imagesMatch ? '–¢–ê–ö' : '–ù–Ü'}`);
                    
                } else {
                    console.log('   ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ AliExpress');
                    this.results.push({
                        article: product.article,
                        product: product.title,
                        yourPrice: product.yourPrice,
                        pageUrl: product.pageUrl,
                        pageName: product.pageName,
                        error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ AliExpress',
                        aliError: aliData ? '–¶—ñ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' : '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏',
                        checkedAt: new Date().toISOString()
                    });
                }

                // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤
                await new Promise(resolve => setTimeout(resolve, 8000));
            }

            this.generateReport();
            
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
        } finally {
            await this.browser.close();
        }
    }

    generateReport() {
        const report = {
            generatedAt: new Date().toISOString(),
            totalProducts: this.results.length,
            needsUpdate: this.results.filter(r => r.needsUpdate).length,
            successCount: this.results.filter(r => !r.error).length,
            pagesChecked: this.productPages.length,
            results: this.results
        };

        fs.writeFileSync(this.reportPath, JSON.stringify(report, null, 2));
        
        console.log('\nüìä ===== –ó–í–Ü–¢ –ü–ï–†–ï–í–Ü–†–ö–ò =====');
        console.log(`üìÑ –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–æ–∫: ${report.pagesChecked}`);
        console.log(`üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${report.totalProducts}`);
        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: ${report.successCount}`);
        console.log(`üî¥ –ü–æ—Ç—Ä–µ–±—É—é—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${report.needsUpdate}`);
        
        if (report.needsUpdate > 0) {
            console.log('\nüìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:');
            this.results.forEach((result, index) => {
                if (result.needsUpdate) {
                    console.log(`\n${index + 1}. ${result.product}`);
                    console.log(`   üìã –ê—Ä—Ç–∏–∫—É–ª: ${result.article}`);
                    console.log(`   üìÑ –°—Ç–æ—Ä—ñ–Ω–∫–∞: ${result.pageName}`);
                    if (result.priceCheck.needsUpdate) {
                        console.log(`   üí∞ –¶—ñ–Ω–∞: ${result.yourPrice} ‚Üí ${result.aliPrice} (—Ä—ñ–∑–Ω–∏—Ü—è: ${result.priceCheck.percentageDiff}%)`);
                    }
                    if (!result.imagesMatch) {
                        console.log(`   üñºÔ∏è  –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å`);
                    }
                }
            });
        }
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏
        const errorResults = this.results.filter(r => r.error);
        if (errorResults.length > 0) {
            console.log('\n‚ùå –¢–æ–≤–∞—Ä–∏ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏:');
            errorResults.forEach((result, index) => {
                console.log(`\n${index + 1}. ${result.product}`);
                console.log(`   üìã –ê—Ä—Ç–∏–∫—É–ª: ${result.article}`);
                console.log(`   üí∞ –¶—ñ–Ω–∞ –Ω–∞ —Å–∞–π—Ç—ñ: ${result.yourPrice}`);
                console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${result.error}`);
                if (result.aliError) {
                    console.log(`   üîó –î–µ—Ç–∞–ª—ñ: ${result.aliError}`);
                }
            });
        }
    }
}

// –ó–∞–ø—É—Å–∫
const checker = new AliExpressChecker();
checker.runCheck().catch(console.error);
