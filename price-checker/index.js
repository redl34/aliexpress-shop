const puppeteer = require('puppeteer');
const axios = require('axios');
const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

class AliExpressChecker {
    constructor() {
        this.results = [];
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç –≤ –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É
        this.reportPath = path.join(__dirname, '..', 'reports', 'latest.json');
    }

    // ... (—Ä–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)

    generateReport() {
        const report = {
            generatedAt: new Date().toISOString(),
            totalProducts: this.results.length,
            needsUpdate: this.results.filter(r => r.needsUpdate).length,
            successCount: this.results.filter(r => !r.error).length,
            results: this.results
        };

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É reports —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        const reportsDir = path.join(__dirname, '..', 'reports');
        if (!fs.existsSync(reportsDir)) {
            fs.mkdirSync(reportsDir, { recursive: true });
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
        fs.writeFileSync(this.reportPath, JSON.stringify(report, null, 2));
        
        console.log('\nüìä ===== –ó–í–Ü–¢ –ü–ï–†–ï–í–Ü–†–ö–ò =====');
        console.log(`üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${report.totalProducts}`);
        console.log(`üî¥ –ü–æ—Ç—Ä–µ–±—É—é—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${report.needsUpdate}`);
        
        // ... (—Ä–µ—à—Ç–∞ generateReport)
    }
}

// –ó–∞–ø—É—Å–∫
const checker = new AliExpressChecker();
checker.runCheck().catch(console.error);
